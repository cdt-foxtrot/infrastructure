---
################################################################################
# Domain Member Configuration Playbook
################################################################################
#
# Purpose:
# This playbook performs two main functions:
# 1. Joins Windows computers to the Active Directory domain
#
# Prerequisites:
# 1. Domain Controller must be operational
# 2. Network DNS must be configured to resolve domain name
# 3. Target computers must have network connectivity to DC
#
# Notes:
# - Computer will reboot after joining domain
# - Local admin rights are required for domain join
################################################################################

- name: Configure Domain Member
  hosts: domain_members
  gather_facts: true
  tasks:

    - name: Configure DNS settings to point to DC
      win_dns_client:
        adapter_names: '*'
        ipv4_addresses:
          - 10.150.1.1
      register: dns_config

    - name: Verify DNS configuration
      fail:
        msg: "Failed to configure DNS settings. Please check DC availability and network connectivity."
      when: dns_config is failed

    # Step 1: Join the computer to the domain
    # This task:
    # - Configures computer name
    # - Joins the specified domain
    # - Uses domain admin credentials from group_vars/all.yml
    - name: Join computer to domain
      win_domain_membership:
        dns_domain_name: "{{ domain_name }}"
        domain_admin_user: "{{ domain_netbios_name }}\\{{ domain_admin_user }}"
        domain_admin_password: "{{ domain_admin_password }}"
        state: domain
      register: domain_join

    - name: Reboot after domain join
      win_reboot:
      when: domain_join.reboot_required

- name: Configure Domain Member (Linux)
  hosts: blueteamlin
  become: yes
  gather_facts: true
  vars:
    ansible_become_password: "{{ sudo_password }}"
  tasks:
    - name: Configure DNS settings to point to DC
      copy:
        dest: /etc/resolv.conf
        content: |
          nameserver 10.150.1.1
      notify: Restart networking

    - name: Configure Kerberos
      copy:
        dest: /etc/krb5.conf
        content: |
          [libdefaults]
            default_realm = {{ domain_name | upper }}
            dns_lookup_realm = false
            dns_lookup_kdc = true
          [realms]
            {{ domain_name | upper }} = {
              kdc = dc.{{ domain_name }}
              admin_server = dc.{{ domain_name }}
          }

          [domain_realm]
            .{{ domain_name }} = {{ domain_name | upper }}
            {{ domain_name }} = {{ domain_name | upper }}
      notify: Restart networking
    - name: Install required packages
      package:
        name:
          - realmd
          - sssd
          - adcli
          - samba-common
          - oddjob
          - oddjob-mkhomedir
          - krb5-user
          - policycoreutils-python-utils
          - sssd-tools
          - libnss-sss
          - libpam-sss
        state: present

    - name: Ensure the system is discovering the domain
      command: "realm discover {{ domain_name }}"
      register: realm_discover
      changed_when: false

    - name: Join the domain
      command: "echo '{{ domain_admin_password }}' | sudo -S realm join --user={{ domain_admin_user }} {{ domain_name }}"
      register: realm_join
      changed_when: '"Joined domain" in realm_join.stdout'

    - name: Enable and start SSSD service
      systemd:
        name: sssd
        enabled: yes
        state: started

    - name: Configure PAM to create home directories on login
      lineinfile:
        path: /etc/pam.d/common-session
        line: 'session required pam_mkhomedir.so skel=/etc/skel/ umask=077'
        state: present

    # Reboot is required to complete domain join
    # After reboot, computer will use domain authentication
    - name: Reboot after domain join
      reboot:
      when: realm_join.changed

  handlers:
    - name: Restart networking
      service:
        name: systemd-resolved
        state: restarted
